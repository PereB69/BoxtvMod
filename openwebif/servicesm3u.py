# Embedded file name: /usr/lib/enigma2/python/Plugins/Extensions/OpenWebif/controllers/views/web/servicesm3u.py
# Modificacion crear services m3u by boxtvmania, crea tv log en el service m3u
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin

from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
VFFSL = valueFromFrameOrSearchList
VFSL = valueFromSearchList
VFN = valueForName
currentTime = time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1530294893.224879
__CHEETAH_genTimestamp__ = 'Fri Jun 29 19:54:53 2018'
__CHEETAH_src__ = '/home/imagen_openbox/servicesm3u.tmpl'
__CHEETAH_srcLastModified__ = 'Fri Jun 29 19:54:44 2018'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'
if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError('This template was compiled with Cheetah version %s. Templates compiled before version %s must be recompiled.' % (__CHEETAH_version__, RequiredCheetahVersion))

class servicesm3u(Template):

    def __init__(self, *args, **KWs):
        super(servicesm3u, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k, v in KWs.items():
                if k in allowedKWs:
                    cheetahKWArgs[k] = v

            self._initCheetahInstance(**cheetahKWArgs)

    def respond(self, trans = None):
        if not trans and not self._CHEETAH__isBuffering and not callable(self.transaction):
            trans = self.transaction
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else:
            _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        write(u'#EXTM3U \n#EXTVLCOPT--http-reconnect=true\n')
        for service in VFFSL(SL, 'services', True):
            _sref = VFFSL(SL, 'service.servicereference', True)
            _sref2=_sref.replace(":","_")[:-1]
            write(u'#EXTINF:-1 ')
            write(u'tvg-logo=\"https://raw.githubusercontent.com/boxtvmania/picon.440x264.transparente.movistar.openbox/master/picons/')
            write(_sref2)
            write(u'.png\",')
            _v = VFFSL(SL, 'service.servicename', True)
            if _v is not None:
                write(_filter(_v, rawExpr=u'$service.servicename'))
            write(u'\n')
            if _sref and u'//127.0.0.1%3' in _sref:
                _sref = _sref.split(u':')[10].split(u'//127.0.0.1%3')[-1]
                _v = u'http://' + VFFSL(SL, 'auth', True) + VFN(VFFSL(SL, 'host', True), 'split', False)(u':')[0] + u':' + _sref[1:]
                if _v is not None:
                    write(_filter(_v))
            elif _sref:
                write(u'#EXTVLCOPT:program=')
                _v = VFFSL(SL, 'service.program', True)
                if _v is not None:
                    write(_filter(_v, rawExpr=u'$service.program'))
                write(u'\n')
                _v = u'http://' + VFFSL(SL, 'auth', True) + VFFSL(SL, 'host', True) + u'/' + _sref
                if _v is not None:
                    write(_filter(_v))
            write(u'\n')

        return _dummyTrans and trans.response().getvalue() or ''

    _CHEETAH__instanceInitialized = False
    _CHEETAH_version = __CHEETAH_version__
    _CHEETAH_versionTuple = __CHEETAH_versionTuple__
    _CHEETAH_genTime = __CHEETAH_genTime__
    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__
    _CHEETAH_src = __CHEETAH_src__
    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__
    _mainCheetahMethod_for_servicesm3u = 'respond'


if not hasattr(servicesm3u, '_initCheetahAttributes'):
    templateAPIClass = getattr(servicesm3u, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(servicesm3u)
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=servicesm3u()).run()
